<?xml version="1.0" encoding="utf-8"?>
<s:WindowedApplication xmlns:fx="http://ns.adobe.com/mxml/2009" 
					   xmlns:s="library://ns.adobe.com/flex/spark" 
					   xmlns:mx="library://ns.adobe.com/flex/mx" 
					   width="360" height="162" backgroundColor="#DADADA" 
					   preloaderChromeColor="#FFFFFF" 
					   width.main="764" height.main="534" 
					   height.login="162" width.login="360" 
					   creationComplete="init()" currentStateChange.main="windowedapplication1_currentStateChangeHandler(event)" viewSourceURL="srcview/index.html" currentStateChange.playlist="windowedapplication1_currentStateChangeHandler(event)" height.playlist="534" width.playlist="764">
	<fx:Script>
		<![CDATA[
			import mx.collections.*;
			import mx.events.DataGridEvent;
			import mx.events.FlexEvent;
			import mx.events.ListEvent;
			import mx.events.StateChangeEvent;
			
			import org.events.subsonicEvent;
			import org.playlist;
			import org.subsonic_player;
			
			import spark.events.IndexChangeEvent;
			
			public var player:subsonic_player;
			private var updater:Timer;
			private var tick:Timer;
			private var playing:Boolean = false;
			/*
				Constructor
			*/
			private function init():void { 
				center_window();
				
				//Initializing subsonic player and timers
				player = new subsonic_player();
				player.addEventListener(subsonicEvent.CHANGED, song_changed);
				updater = new Timer(30000); // 30 seconds
				updater.addEventListener(TimerEvent.TIMER, update);
				tick = new Timer(250);
				tick.addEventListener(TimerEvent.TIMER, ticking);
				
				//Fill in stored credentials
				if(player.username){
					username.text = player.username;
					password.text = player.password;
					server.text = player.server;
				}
			}
			
			/*
			* center_window method 
			* Used to center the window in the screen
			*/
			protected function center_window():void{
				nativeWindow.x = (Screen.mainScreen.bounds.width - this.width) / 2; 
				nativeWindow.y = (Screen.mainScreen.bounds.height - this.height) / 2;
			}

			/*
			* login_btn_clickHandler handler 
			* Called when the user click the login button
			*
			* @param event MouseEvent Object
			*/
			protected function login_btn_clickHandler(event:MouseEvent):void
			{
				player.login(server.text, username.text, password.text, true, loged_in);
			}
			
			/*
			* loged_in callback 
			* Called when credentials are verified
			*
			* @param obj Object with the user access information
			*
			* @see login_btn_clickHandler
			*/
			private function loged_in(obj:Object):void {
				//switch UI
				this.currentState = "main";
				play_btn.enabled = false;
				
				//Check if user is admin
				var is_admin:Boolean = obj.data["subsonic-response"].user.adminRole;
				welcome_lbl.text = "Welcome " + player.username + ((is_admin)?" (admin)":"");
				
				//Load artists and now playing info
				player.getUsers(users_update);
				player.getArtists(artists_update);
				
				if(player.currPlaylist){
					curr_playlist.text = player.currPlaylist.name;
				} else {
					curr_playlist.text = "No playlist selected";
				}
				
				//Start 30sec timer to update playing info
				updater.start();
			}
			
			/*
			* timer callback 
			* Called every 30 secs
			*
			* @param event TimerEvent Object
			*
			* @see loged_in
			*/
			private function update(event:TimerEvent):void {
				player.getUsers(users_update);
			}
			
			/*
			* users_update callback 
			* Called when nowPlaying info is ready
			*
			* @param arr Array with the user name and song playing 
			*
			* @see update
			*/
			private function users_update(arr:Array):void {
				userlist.dataProvider = new ArrayCollection(arr);
			}
			
			/*
			* artists_update callback 
			* Called when artists info is ready
			*
			* @param xml XML with the indexed artists from subsonic 
			*
			* @see loged_in
			*/
			private function artists_update(xml:XML):void{
				artists.dataProvider = new XMLListCollection(xml.children().children());
			}
			
			/*
			* treeLabel callback 
			* Used by Tree component to determine label string rendered
			*
			* @param item Object object of the row of Tree Component 
			*/
			private function treeLabel(item:Object):String {
				var node:XML = XML(item);
				return node.@name;
			}
			
			/*
			* artists_changeHandler handler 
			* Called when you select an item from the Tree Component
			*
			* @param event ListEvent object 
			*/
			protected function artists_changeHandler(event:ListEvent):void
			{
				//reset albums and songs display
				albums.dataProvider = null;
				songs.dataProvider = null;
				//load albums of selected artist
				player.getAlbums(event.currentTarget.selectedItem.@id, albums_update);
			}
			
			/*
			* albums_update callback 
			* Called when albums info is available
			*
			* @param arr Array with the albums id and title 
			*/
			private function albums_update(arr:Array):void{
				//fill in albums component
				albums.dataProvider = new ArrayCollection(arr);
			}

			/*
			* albums_changeHandler handler 
			* Called when any album is selected
			*
			* @param event ListEvent Object 
			*/
			protected function albums_changeHandler(event:ListEvent):void
			{
				//empty songs component
				songs.dataProvider = null;
				//load songs from the selected album
				player.getSongs(event.currentTarget.dataProvider[event.rowIndex].id, songs_update);
			}
			
			/*
			* songs_update callback 
			* Called when songs info is available
			*
			* @param arr Array with song id and title 
			*/
			private function songs_update(arr:Array):void{
				songs.dataProvider = new ArrayCollection(arr);
			}
			
			/*
			* windowedapplication1_currentStateChangeHandler handler 
			* Called when the applications change from state
			*
			* @param event StateChangeEvent Object 
			*/
			protected function windowedapplication1_currentStateChangeHandler(event:StateChangeEvent):void
			{	
				//Re-center window with new state dimensions
				center_window();
			}

			/*
			* songs_changeHandler handler 
			* Called when the user selects a song from the song list
			*
			* @param event ListEvent Object 
			*/
			protected function songs_changeHandler(event:ListEvent):void
			{
				if(event.columnIndex == 1){
					//Play selected song
					player.playSong(event.currentTarget.dataProvider[event.rowIndex].id);
					//enable pause actions
					play_btn.enabled = true;
					play_btn.label = "||";
					playing = true;
					//Start UI updater (this is 250ms)
					tick.start();
				}
			}
			
			/*
			* ticking callback 
			* Called every 250ms after first playback
			*
			* @param event TimerEvent Object 
			*/
			private function ticking(event:TimerEvent):void {
				//Change progress bar state
				playback.setProgress(player.status.time,player.status.duration);
				
				//Calculate and set playing / duration display
				var m1:* = Math.floor((player.status.time / 1000) / 60);
				m1 = (m1 < 10)?"0" + m1: m1;
				var s1:* = Math.floor((player.status.time / 1000) - m1 * 60);
				s1 = (s1 < 10)?"0" + s1: s1;
				var m2:* = Math.floor((player.status.duration / 1000) / 60);
				m2 = (m2 < 10)?"0" + m2: m2;
				var s2:* = Math.floor((player.status.duration / 1000) - m2 * 60);
				s2 = (s2 < 10)?"0" + s2: s2;
				time.text = m1 + ":" + s1 + " / " + m2 + ":" + s2;
			}

			/*
			* play_btn_clickHandler handler 
			* Called when play/pause button is pressed
			*
			* @param event MouseEvent Object 
			*/
			protected function play_btn_clickHandler(event:MouseEvent):void
			{
				if(playing) {
					//Pause stream
					player.pause();	
					play_btn.label = ">";
					playing = false;
				} else {
					//Resume stream
					player.play();
					play_btn.label = "||";
					playing = true;
				} 
			}

			protected function nav_btn_clickHandler(event:MouseEvent):void
			{
				this.currentState = (this.currentState == "main")?"playlist":"main";
				if(this.currentState == "playlist"){
					player.getPlaylists(playlists_loaded);
					if(player.currPlaylist) {
						player.currPlaylist.createFromId(player.currPlaylist.id, playlist_loaded);
					}
					if(player.playing) song_changed({data:{id:player.playing}});
				}
			}
			
			private function song_changed(obj:Object):void {
				if(playlist_data){
					for(var i:int = 0, max:int = playlist_data.dataProvider.length; i < max; i++){
						if(playlist_data.dataProvider[i].id == obj.data.id) playlist_data.selectedIndex = i;
					}
				}
			}
			
			private function playlists_loaded(arr:Array):void {
				playlists_combo.dataProvider = new ArrayCollection(arr);
				var index:int = -1;
				if(player.currPlaylist) {
					for(var i:int = 0, max:int = arr.length; i < max; i++){
						if(arr[i].data == player.currPlaylist.id) index = i;
					}
				}
				playlists_combo.selectedIndex = -1; //HACK :S
				playlists_combo.selectedIndex = index;
			}

			protected function playlists_combo_changeHandler(event:IndexChangeEvent):void
			{
				player.currPlaylist = new playlist(player);
				player.currPlaylist.createFromId(event.currentTarget.dataProvider[event.newIndex].data, playlist_loaded);
				curr_playlist.text = event.currentTarget.dataProvider[event.newIndex].label;
			}
			
			private function playlist_loaded(arr:Array):void {
				playlist_data.dataProvider = new ArrayCollection(arr);
			}


			protected function playlist_data_changeHandler(event:ListEvent):void
			{
				//Play selected song
				player.playFrom(event.currentTarget.dataProvider[event.rowIndex].id);
				//enable pause actions
				play_btn.enabled = true;
				play_btn.label = "||";
				playing = true;
				//Start UI updater (this is 250ms)
				tick.start();
			}


			protected function playlist_data_updateCompleteHandler(event:FlexEvent):void
			{
				if(event.currentTarget.dataProvider){
					for(var i:int = 0, max:int = event.currentTarget.dataProvider.length; i < max; i++)
						player.currPlaylist.songs[i] = event.currentTarget.dataProvider[i];
				}
			}

		]]>
	</fx:Script>

	<s:states>
		<s:State name="login"/>
		<s:State name="main"/>
		<s:State name="playlist"/>
	</s:states>
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>
	<s:layout.main>
		<s:BasicLayout/>
	</s:layout.main>
	<s:layout.playlist>
		<s:BasicLayout/>
	</s:layout.playlist>
	<s:Label x="12" y="15" text="Username:" color="#000000" textAlign="right" width="70" includeIn="login"/>
	<s:TextInput x="92" y="10" id="username" width="250" enabled="true" textAlign="left" includeIn="login"/>
	<s:Label x="12" y="47" text="Password:" color="#000000" textAlign="right" width="70" includeIn="login"/>
	<s:TextInput x="92" y="41" id="password" width="250" enabled="true" textAlign="left" includeIn="login" displayAsPassword="true"/>
	<s:Label x="12" y="78" text="Server:" color="#000000" textAlign="right" width="70" includeIn="login"/>
	<s:TextInput x="92" y="72" id="server" width="250" enabled="true" textAlign="left" displayAsPassword="false" includeIn="login"/>
	<s:Button x="145" y="102" label="Log in" id="login_btn" enabled="true" click="login_btn_clickHandler(event)" includeIn="login"/>
	<s:Label includeIn="main,playlist" x="10" y="6" text="Welcome" width="147" color="#000000" id="welcome_lbl"/>
	<mx:DataGrid includeIn="main" y="42" height="103" id="userlist" left="8" width="385">
		<mx:columns>
			<mx:DataGridColumn headerText="Username" dataField="username" width="100"/>
			<mx:DataGridColumn headerText="Listening" dataField="listening"/>
		</mx:columns>
	</mx:DataGrid>
	<mx:Tree includeIn="main" id="artists" labelFunction="treeLabel" change="artists_changeHandler(event)" bottom="10" width="384" x="8" top="153"></mx:Tree>
	<mx:DataGrid includeIn="main" y="42" id="albums" height="207" change="albums_changeHandler(event)" left="398" right="10" verticalAlign="middle">
		<mx:columns>
			<mx:DataGridColumn headerText="id" visible="false" dataField="id"/>
			<mx:DataGridColumn itemRenderer="album_actions" resizable="false" sortable="false" width="72"/>
			<mx:DataGridColumn headerText="Albums" dataField="album" resizable="true"/>
		</mx:columns>
	</mx:DataGrid>
	<mx:DataGrid id="songs" includeIn="main" change="songs_changeHandler(event)" left="398" right="10" bottom="10" top="257" verticalAlign="middle">
		<mx:columns>
			<mx:DataGridColumn dataField="id" headerText="id" visible="false"/>
			<mx:DataGridColumn itemRenderer="song_actions" width="38" sortable="false"/>
			<mx:DataGridColumn headerText="Songs" dataField="song"/>
		</mx:columns>
	</mx:DataGrid>
	<mx:ProgressBar includeIn="main,playlist" y="12" height="12" labelPlacement="bottom" label=" " id="playback" maximum="1" minimum="0" indeterminate="false" enabled="true" mode="manual" left="470" right="93"/>
	<s:Button includeIn="main,playlist" x="434" y="6" label="&gt;" width="28" id="play_btn" click="play_btn_clickHandler(event)"/>
	<s:Button label="p" width="28" id="nav_btn" x="399" y="6" includeIn="main,playlist" label.playlist="m" fontSize.playlist="10" width.playlist="29" x.playlist="398" fontSize.main="10" click="nav_btn_clickHandler(event)"/>
	<s:Label includeIn="main,playlist" y="12" text="00:00 / 00:00" right="14" id="time"/>
	<s:Button includeIn="playlist" y="45" label="Add playlist" left="146"/>
	<s:TextInput includeIn="playlist" y="45" left="10"/>
	<s:DropDownList includeIn="playlist" y="45" right="89" id="playlists_combo" change="playlists_combo_changeHandler(event)"></s:DropDownList>
	<s:Button includeIn="playlist" y="45" label="Save" right="11"/>
	<s:Label includeIn="playlist" y="51" text="Playlists:" right="205"/>
	<mx:HRule includeIn="main,playlist" x="10" y="35" width="744"/>
	<mx:DataGrid includeIn="playlist" id="playlist_data" left="10" right="10" bottom="10" top="74" change="playlist_data_changeHandler(event)" updateComplete="playlist_data_updateCompleteHandler(event)">
		<mx:columns>
			<mx:DataGridColumn headerText="id" dataField="id" visible="false"/>
			<mx:DataGridColumn headerText="Artist" dataField="artist" width="150"/>
			<mx:DataGridColumn headerText="Album" dataField="album" width="150"/>
			<mx:DataGridColumn dataField="title" headerText="Title" resizable="true"/>
			<mx:DataGridColumn dataField="year" headerText="Year" width="80" resizable="false"/>
			<mx:DataGridColumn dataField="genere" headerText="Genere" width="80" resizable="false"/>
		</mx:columns>
	</mx:DataGrid>
	<s:Label includeIn="main,playlist" x="10" y="22" text="Curr Playlist" fontSize="11"  id="curr_playlist"/>
</s:WindowedApplication>
